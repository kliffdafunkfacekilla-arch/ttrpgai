from sqlalchemy import Column, Integer, String, Text, JSON, ForeignKey
from sqlalchemy.orm import relationship
# Import the 'Base' we created in database.py
from .database import Base

class Campaign(Base):
    """
    Stores the one active campaign.
    The summary and name are generated by the AI DM.
    """
    __tablename__ = "campaigns"

    id = Column(Integer, primary_key=True, index=True)
    name = Column(String, default="Untitled Campaign")
    main_plot_summary = Column(Text, nullable=True)

    # This links a Campaign to its many ActiveQuests
    active_quests = relationship("ActiveQuest", back_populates="campaign")

class ActiveQuest(Base):
    """
    Stores a single quest (main quest or sub-plot) that the AI DM has generated and given to the player.
    """
    __tablename__ = "active_quests"

    id = Column(Integer, primary_key=True, index=True)
    title = Column(String, index=True)
    description = Column(Text, nullable=True)
    # The list of steps, generated by the AI DM
    # e.g., ["Find the ledger", "Take it to the Artificer"]
    steps = Column(JSON, default=[])
    current_step = Column(Integer, default=1)
    # "active", "completed", "failed"
    status = Column(String, default="active", index=True)

    # This links the quest to its parent Campaign
    campaign_id = Column(Integer, ForeignKey("campaigns.id"))
    campaign = relationship("Campaign", back_populates="active_quests")

class StoryFlag(Base):
    """
    The AI's "memory". This stores key player choices or world events so the AI can adapt to them.
    e.g., flag_name="player_killed_informant", value="true"
    """
    __tablename__ = "story_flags"

    id = Column(Integer, primary_key=True, index=True)
    # The unique name for the flag
    flag_name = Column(String, unique=True, index=True)
    value = Column(String, nullable=True)

<<<<<<< Updated upstream
class CombatEncounter(Base):
    __tablename__ = "combat_encounters"
    id = Column(Integer, primary_key=True, index=True)
    location_id = Column(Integer, nullable=False)
    status = Column(String, default="active", index=True) # active, players_win, npcs_win
    turn_order = Column(JSON, default=[])
    current_turn_index = Column(Integer, default=0)
    is_finished = Column(Integer, default=0) # Using Integer for SQLite boolean

    participants = relationship("CombatParticipant", back_populates="encounter")

class CombatParticipant(Base):
    __tablename__ = "combat_participants"
    id = Column(Integer, primary_key=True, index=True)
    actor_id = Column(String, index=True) # e.g., "player_1", "npc_12"
    actor_type = Column(String) # "player" or "npc"
    initiative_roll = Column(Integer)

    combat_id = Column(Integer, ForeignKey("combat_encounters.id"))
    encounter = relationship("CombatEncounter", back_populates="participants")
=======
# --- NEW COMBAT MODELS ---

class CombatEncounter(Base):
    __tablename__ = "combat_encounters"

    id = Column(Integer, primary_key=True, index=True)
    # Foreign key to world_engine's location. We just store the ID.
    location_id = Column(Integer, index=True)
    # "active", "completed", "fled"
    status = Column(String, default="active", index=True)

    # List of actor IDs (e.g., ["player_1", "npc_goblin_1", "npc_goblin_2"])
    turn_order = Column(JSON, default=[])
    current_turn_index = Column(Integer, default=0)

    # This links an Encounter to its many Participants
    participants = relationship("CombatParticipant", back_populates="encounter", cascade="all, delete-orphan")

class CombatParticipant(Base):
    __tablename__ = "combat_participants"

    id = Column(Integer, primary_key=True, index=True)
    
    # Link to the parent CombatEncounter
    combat_id = Column(Integer, ForeignKey("combat_encounters.id"))
    encounter = relationship("CombatEncounter", back_populates="participants")

    # The unique ID for the actor (e.g., "player_1" or "npc_goblin_1")
    actor_id = Column(String, index=True)
    # "player" or "npc"
    actor_type = Column(String)
    
    initiative_roll = Column(Integer)
>>>>>>> Stashed changes
